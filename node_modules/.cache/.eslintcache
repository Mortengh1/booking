[{"/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/index.js":"1","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/App.js":"2","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/reportWebVitals.js":"3","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/Bookings.js":"4","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/Home.js":"5","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/Login.js":"6","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/Registration.js":"7","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/NoPage.js":"8","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/components/Nav.js":"9","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/api/axios.js":"10","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/components/Protected.js":"11","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/Profile.js":"12","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/ResSignup.js":"13","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/components/RestaurantCard.js":"14","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/components/BookingCard.js":"15"},{"size":647,"mtime":1669723688546,"results":"16","hashOfConfig":"17"},{"size":1972,"mtime":1670843420415,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1669024442434,"results":"19","hashOfConfig":"17"},{"size":950,"mtime":1671109460924,"results":"20","hashOfConfig":"17"},{"size":1625,"mtime":1671108991480,"results":"21","hashOfConfig":"17"},{"size":2931,"mtime":1671109414677,"results":"22","hashOfConfig":"17"},{"size":6431,"mtime":1671111535806,"results":"23","hashOfConfig":"17"},{"size":80,"mtime":1669291620620,"results":"24","hashOfConfig":"17"},{"size":1275,"mtime":1671110778234,"results":"25","hashOfConfig":"17"},{"size":270,"mtime":1669644802548,"results":"26","hashOfConfig":"17"},{"size":300,"mtime":1671110829238,"results":"27","hashOfConfig":"17"},{"size":3506,"mtime":1671109684637,"results":"28","hashOfConfig":"17"},{"size":6821,"mtime":1671110199603,"results":"29","hashOfConfig":"17"},{"size":5155,"mtime":1671111039729,"results":"30","hashOfConfig":"17"},{"size":3306,"mtime":1671111324881,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"10p6rr8",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},"/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/index.js",[],[],[],"/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/App.js",[],[],"/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/reportWebVitals.js",[],[],"/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/Bookings.js",["86"],[],"import { useEffect, useState } from \"react\";\nimport BookingCard from \"../components/BookingCard\";\n\nconst Bookings = () => {\n  //Gets user id from localStorage\n  const userId = localStorage.getItem(\"userId\");\n  const [bookings, setBookings] = useState([]);\n  useEffect(() => {\n    //Gets the users bookings based on the user id\n    async function getBookings() {\n      const url = `https://skole.mortengh.dk/PHP/userBookings.php?userId=${userId}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      const bookingsArray = Object.keys(data).map((key) => ({\n        key: key,\n        ...data[key],\n      })); // from object to array\n      setBookings(bookingsArray);\n    }\n    getBookings();\n  }, []);\n\n    return(\n      <div className=\"BookingGrid\">\n      {bookings.map((booking) => {\n        return <BookingCard booking={booking} key={booking.key} />;\n      })}\n    </div> \n    )\n  };\n  \n  export default Bookings;","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/Home.js",[],[],"/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/Login.js",["87"],[],"import { useRef, useState, useEffect } from \"react\";\n\nimport axios from \"../api/axios\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n//The url to the php file that handles login requests\nconst LOGIN_URL = \"https://skole.mortengh.dk/PHP/login.php\";\n\nconst Login = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  //Stores the page the user tried to acces without being logged in\n  const from = location.state?.from?.pathname || \"/\";\n\n  const userRef = useRef();\n  const errRef = useRef();\n\n  const [user, setUser] = useState(\"\");\n  const [pwd, setPwd] = useState(\"\");\n  const [errMsg, setErrMsg] = useState(\"\");\n\n  //Tells which field to focus\n  useEffect(() => {\n    userRef.current.focus();\n  }, []);\n\n  useEffect(() => {\n    setErrMsg(\"\");\n  }, [user, pwd]);\n\n  //When submitting the login form, it runs the post request with the mail and password\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    axios\n      .post(LOGIN_URL, JSON.stringify({ mail: user, pwd }))\n      .then((result) => {\n        console.log(result.data);\n        if (result.data.status == \"invalid\") {\n          //If the request is invalid, it sets the error message\n          setErrMsg(result.data.errorMessage);\n        } else {\n          //Stores the user id in loaclStoreafe and sets loggedIn to true\n          localStorage.setItem(\"userId\", result.data.userId);\n          localStorage.setItem(\"loggedIn\", true);\n          //Empties the user and password field\n          setUser(\"\");\n          setPwd(\"\");\n          //Navigates to the stored page from earlier\n          navigate(from, { replace: true });\n          //Reloads the site\n          window.location.reload();\n        }\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"LoginContainer\">\n        <div className=\"LoginForm\">\n          <h1>Log ind</h1>\n          <p\n            ref={errRef}\n            className={errMsg ? \"ErrorMessage\" : \"offScreen\"}\n            aria-live=\"assertive\"\n          >\n            {errMsg}\n          </p>\n\n          <form onSubmit={handleSubmit}>\n            <label htmlFor=\"username\">Email:</label>\n            <input\n              type=\"text\"\n              id=\"username\"\n              ref={userRef}\n              onChange={(e) => setUser(e.currentTarget.value)}\n              value={user}\n              required\n            ></input>\n            <label htmlFor=\"password\">Kodeord:</label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              onChange={(e) => setPwd(e.currentTarget.value)}\n              value={pwd}\n              required\n            ></input>\n            <button className=\"btn\">Log ind</button>\n            <p>\n              Har du ikke en bruger? <br />\n              SÃ¥ registrer dig <a href=\"/registration\">her</a>\n            </p>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default Login;\n","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/Registration.js",["88","89","90"],[],"import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../App.css\";\nimport $ from \"jquery\";\nimport parse from \"html-react-parser\";\nimport regImg from \"../images/restaurantbooking.jpg\";\n\nconst Registration = () => {\n  function RegistrationFunc() {\n    const navigate = useNavigate();\n    const initialValues = {\n      firstname: \"\",\n      lastname: \"\",\n      mail: \"\",\n      age: \"\",\n      phonenr: \"\",\n      pwd: \"\",\n      resite: \"\",\n    };\n    const [signupValues, setSignupValues] = useState(initialValues);\n    const [signupErrors, setSignupErrors] = useState({});\n    const [isSubmit, setIsSubmit] = useState(false);\n    const [result, setResult] = useState(\"\");\n    const [loading, setLoading] = useState(true);\n\n    //Sets the signup values on change\n    const handleChange = (e) => {\n      const { name, value } = e.target;\n      setSignupValues({ ...signupValues, [name]: value });\n    };\n\n    const handleSumbit = (e) => {\n      e.preventDefault();\n      const form = $(e.target);\n      $.ajax({\n        type: \"POST\",\n        url: form.attr(\"action\"),\n        data: form.serialize(),\n        success(data) {\n          setResult(data);\n          setLoading(false);\n        },\n      });\n      // loadData();\n      setSignupErrors(validateSignup(signupValues));\n      setIsSubmit(true);\n    };\n\n    useEffect(() => {\n      if (Object.keys(signupErrors).length === 0 && isSubmit) {\n        console.log(signupValues);\n      }\n    }, [signupErrors]);\n\n    const validateSignup = (values) => {\n      //Sets errors if fields is empty\n      const errors = {};\n      const regex = /^\\S+@\\S+\\.\\S+$/;\n      if (!values.firstname) {\n        errors.firstname = \"Fornavn skal udfyldes\";\n      }\n      if (!values.lastname) {\n        errors.lastname = \"Efternavn skal udfyldes\";\n      }\n      if (!values.mail) {\n        errors.mail = \"E-mail skal udfyldes\";\n      } else if (!regex.test(values.mail)) {\n        errors.mail = \"E-mail er ikke gyldig\";\n      }\n      if (!values.age) {\n        errors.age = \"Alder skal udfyldes\";\n      }\n      if (!values.phonenr) {\n        errors.phonenr = \"Tlf. nr. skal udfyldes\";\n      }\n      if (!values.pwd) {\n        errors.pwd = \"Kodeord skal udfyldes\";\n      }\n      if (values.pwd && values.pwd != values.resite) {\n        errors.resite = \"Kodeordene er ikke ens\";\n      }\n\n      return errors;\n    };\n\n    return (\n      //If there is no errors, it navigates you to the login page\n      <div className=\"App\">\n        {Object.keys(signupErrors).length === 0 &&\n        loading === false &&\n        Object.keys(result).length === 0 &&\n        isSubmit\n          ? navigate(\"/login\")\n          : []}\n\n        <div className=\"RegistrationContainer\">\n          <div className=\"FormContainer\">\n            <div className=\"Image\">\n              <img src={regImg} alt=\"Registration image\" />\n            </div>\n            <form\n              className=\"RegistrationForm\"\n              //The php file that handels signups\n              action=\"https://skole.mortengh.dk/PHP/signup.php\"\n              method=\"post\"\n              onSubmit={(event) => handleSumbit(event)}\n            >\n              <h1>Registrer</h1>\n              {result && <div>{parse(result)}</div>}\n\n              <div className=\"Inputs\">\n                <div>\n                  <input\n                    placeholder=\"Fornavn\"\n                    type=\"text\"\n                    id=\"firstname\"\n                    name=\"firstname\"\n                    value={signupValues.firstname}\n                    onChange={(event) => handleChange(event)}\n                  />\n                  <p className=\"FormError\">{signupErrors.firstname}</p>\n                </div>\n                <div>\n                  <input\n                    placeholder=\"Efternavn\"\n                    type=\"text\"\n                    id=\"lastname\"\n                    name=\"lastname\"\n                    value={signupValues.lastname}\n                    onChange={(event) => handleChange(event)}\n                  />\n                  <p className=\"FormError\">{signupErrors.lastname}</p>\n                </div>\n                <div>\n                  <input\n                    placeholder=\"E-mail\"\n                    type=\"text\"\n                    id=\"mail\"\n                    name=\"mail\"\n                    value={signupValues.mail}\n                    onChange={(event) => handleChange(event)}\n                  />\n                  <p className=\"FormError\">{signupErrors.mail}</p>\n                </div>\n                <div>\n                  <input\n                    placeholder=\"Alder\"\n                    type=\"text\"\n                    id=\"age\"\n                    name=\"age\"\n                    value={signupValues.age}\n                    onChange={(event) => handleChange(event)}\n                  />\n                  <p className=\"FormError\">{signupErrors.age}</p>\n                </div>\n                <div>\n                  <input\n                    placeholder=\"Tlf. nr.\"\n                    type=\"tel\"\n                    id=\"phonenr\"\n                    name=\"phonenr\"\n                    value={signupValues.phonenr}\n                    onChange={(event) => handleChange(event)}\n                  />\n                  <p className=\"FormError\">{signupErrors.phonenr}</p>\n                </div>\n                <div>\n                  <input\n                    placeholder=\"Kodeord\"\n                    type=\"password\"\n                    id=\"pwd\"\n                    name=\"pwd\"\n                    value={signupValues.pwd}\n                    onChange={(event) => handleChange(event)}\n                  />\n                  <p className=\"FormError\">{signupErrors.pwd}</p>\n                </div>\n                <div>\n                  <input\n                    placeholder=\"Gentag Kodeord\"\n                    type=\"password\"\n                    id=\"resite\"\n                    name=\"resite\"\n                    value={signupValues.resite}\n                    onChange={(event) => handleChange(event)}\n                  />\n                  <p className=\"FormError\">{signupErrors.resite}</p>\n                </div>\n                <button className=\"btn\" type=\"submit\">\n                  Registrer\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return RegistrationFunc();\n};\n\nexport default Registration;\n","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/NoPage.js",[],[],"/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/components/Nav.js",["91"],[],"import { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nexport default function Nav() {\n    //Get the loggedIn status from localStorage\n    const isLoggedIn = localStorage.getItem('loggedIn');\n    //If the user clicks the logout button, it clears the localStorage and reloads the page\n    const logout =  async () =>{\n        localStorage.setItem('userId', '');\n        localStorage.setItem('loggedIn', '');\n        localStorage.clear();\n        window.location.reload();\n    }\n\n    return (\n      //If the user is logged in, the nav lets the user see the nav for logged in users\n      //If the user is not logged in, it lets the user see the nav for users that are not logged in\n        isLoggedIn\n        ? <nav>\n            <NavLink to=\"/\" end>Restauranter</NavLink>\n            <NavLink to=\"/Bookings\">Bookings</NavLink>\n            <NavLink to=\"/Profile\">Profil</NavLink>\n          <button onClick={logout}>Log ud</button>\n        </nav>\n        :   <nav>\n                <NavLink to=\"/\" end>Restauranter</NavLink>\n                <NavLink to=\"/Bookings\">Bookings</NavLink>\n                <NavLink to=\"/Registration\">Registrer</NavLink>\n                <NavLink to=\"/Login\">Log ind</NavLink>\n              \n            </nav>\n        \n    );\n}\n","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/api/axios.js",[],[],"/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/components/Protected.js",[],[],"/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/Profile.js",["92","93"],[],"import { React, useRef, useState, useEffect } from \"react\";\nimport axios from \"../api/axios\";\n\nconst Profile = () => {\n  //Gets the user id from loaclStorage\n  const userId = localStorage.getItem(\"userId\");\n  //The url to the php file that gets the user information from the database\n  const USERS_URL = \"https://skole.mortengh.dk/PHP/users.php\";\n  //The url that handles the user information update\n  const UPDATE_USERS_URL = \"https://skole.mortengh.dk/PHP/updateUser.php\";\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [mail, setMail] = useState(\"\");\n  const [phoneNr, setPhoneNr] = useState(\"\");\n  const [errMsg, setErrMsg] = useState(\"\");\n  const errRef = useRef();\n\n  //Gets the user information based on user id\n  useEffect(() => {\n    axios.post(USERS_URL, JSON.stringify({ userId })).then((result) => {\n      setFirstName(result.data.firstname);\n      setLastName(result.data.lastname);\n      setAge(result.data.age);\n      setMail(result.data.mail);\n      setPhoneNr(result.data.phonenr);\n    });\n  }, []);\n\n  const handleChangeFirstName = (e) => {\n    setFirstName(e.target.value);\n  };\n  const handleChangeLastName = (e) => {\n    setLastName(e.target.value);\n  };\n  const handleChangeAge = (e) => {\n    setAge(e.target.value);\n  };\n  const handleChangePhoneNr = (e) => {\n    setPhoneNr(e.target.value);\n  };\n\n  //Send a request to update the users information with the values from the field in the form\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    axios\n      .post(\n        UPDATE_USERS_URL,\n        JSON.stringify({ firstName, lastName, age, phoneNr, userId })\n      )\n      .then((result) => {\n        if (result.data.status == \"invalid\") {\n          //If the request is invalid, it sets the error message to the error\n          setErrMsg(result.data.errorMessage);\n\n        } else {\n        }\n      });\n  };\n\n  return (\n    <>\n      <div className=\"ProfileContainer\">\n        <div className=\"ProfileForm\">\n          <h1>Din profil</h1>\n          <form onSubmit={handleSubmit}>\n            <p\n              ref={errRef}\n              className={errMsg ? \"ErrorMessage\" : \"offScreen\"}\n              aria-live=\"assertive\"\n            >\n              {errMsg}\n            </p>\n            <label htmlFor=\"firstName\">Fornavn:</label>\n            <input\n              name=\"firstName\"\n              type=\"text\"\n              value={firstName}\n              onChange={(event) => handleChangeFirstName(event)}\n            />\n            <label htmlFor=\"lastName\">Efternavn:</label>\n            <input\n              name=\"lastName\"\n              type=\"text\"\n              value={lastName}\n              onChange={(event) => handleChangeLastName(event)}\n            />\n            <label htmlFor=\"age\">Alder:</label>\n            <input\n              name=\"age\"\n              type=\"text\"\n              value={age}\n              onChange={(event) => handleChangeAge(event)}\n            />\n            <label htmlFor=\"mail\">E-mail:</label>\n            <input name=\"mail\" type=\"text\" value={mail} disabled />\n            <label htmlFor=\"phoneNr\">Tlf. Nr.:</label>\n            <input\n              name=\"phoneNr\"\n              type=\"text\"\n              value={phoneNr}\n              onChange={(event) => handleChangePhoneNr(event)}\n            />\n            <button className=\"btn\">Opdater</button>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Profile;\n","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/pages/ResSignup.js",["94"],[],"import { useRef, useState, useEffect } from \"react\";\nimport imgPlaceholder from \"../images/placeholder.png\";\n\nimport axios from \"../api/axios\";\n\n//The url to the php file that handles restaurant signups\nconst SIGNUP_URL = \"https://skole.mortengh.dk/PHP/resSignup.php\";\n\nconst ResSignup = () => {\n  const userRef = useRef();\n  const errRef = useRef();\n\n  const [name, setName] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [postnr, setPostnr] = useState(\"\");\n  const [city, setCity] = useState(\"\");\n  const [mail, setMail] = useState(\"\");\n  const [capacity, setCapacity] = useState(\"\");\n  const [phonenr, setPhonenr] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [descr, setDescr] = useState(\"\");\n  const [errMsg, setErrMsg] = useState(\"\");\n\n  //Tells which field to focus\n  useEffect(() => {\n    userRef.current.focus();\n  }, []);\n\n  useEffect(() => {\n    setErrMsg(\"\");\n  }, [name, address, mail, capacity, phonenr, image, descr]);\n\n  //Checks the image size and makes sure its not to big, and sets the image so it can be previewed\n  function handleImageChange(event) {\n    const file = event.target.files[0];\n    if (file.size < 500000) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        setImage(event.target.result);\n      };\n      reader.readAsDataURL(file);\n      setErrMsg(\"\");\n    } else {\n      setErrMsg(\"Billedet er for stort\");\n    }\n  }\n\n  //Makes a post request with the values fromm the fields of the form\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    axios\n      .post(\n        SIGNUP_URL,\n        JSON.stringify({\n          resName: name,\n          resAddress: address,\n          postnr,\n          city,\n          mail,\n          capacity,\n          phonenr,\n          image,\n          descr,\n        })\n      )\n      .then((result) => {\n        //If the request is invalid, it sets the error message to the error\n        //If the request is good, it clears the values\n        if (result.data.status == \"invalid\") {\n          setErrMsg(result.data.errorMessage);\n        } else {\n          setName(\"\");\n          setAddress(\"\");\n          setPostnr(\"\");\n          setCity(\"\");\n          setMail(\"\");\n          setCapacity(\"\");\n          setPhonenr(\"\");\n          setImage(\"\");\n          setDescr(\"\");\n        }\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"CreateRestaurantContainer\">\n        <div className=\"RestaurantForm\">\n          <h1>Opret Restaurant</h1>\n          <p\n            ref={errRef}\n            className={errMsg ? \"ErrorMessage\" : \"offScreen\"}\n            aria-live=\"assertive\"\n          >\n            {errMsg}\n          </p>\n\n          <form onSubmit={handleSubmit}>\n            <div className=\"Row\">\n              <div className=\"Field\">\n                <label htmlFor=\"name\">Restaurant navn</label>\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  id=\"Name\"\n                  ref={userRef}\n                  onChange={(e) => setName(e.currentTarget.value)}\n                  value={name}\n                  required\n                ></input>\n              </div>\n              <div className=\"Field\">\n                <label htmlFor=\"city\">By</label>\n                <input\n                  type=\"text\"\n                  name=\"city\"\n                  id=\"City\"\n                  ref={userRef}\n                  onChange={(e) => setCity(e.currentTarget.value)}\n                  value={city}\n                  required\n                ></input>\n              </div>\n              <div className=\"Field\">\n                <label htmlFor=\"postnr\">Post nr.:</label>\n                <input\n                  type=\"text\"\n                  name=\"postnr\"\n                  id=\"Postnr\"\n                  ref={userRef}\n                  onChange={(e) => setPostnr(e.currentTarget.value)}\n                  value={postnr}\n                  required\n                ></input>\n              </div>\n              <div className=\"Field\">\n                <label htmlFor=\"address\">Adresse</label>\n                <input\n                  type=\"text\"\n                  name=\"address\"\n                  id=\"Address\"\n                  ref={userRef}\n                  onChange={(e) => setAddress(e.currentTarget.value)}\n                  value={address}\n                  required\n                ></input>\n              </div>\n              <div className=\"Field\">\n                <label htmlFor=\"mail\">Mail</label>\n                <input\n                  type=\"email\"\n                  name=\"email\"\n                  id=\"Mail\"\n                  ref={userRef}\n                  onChange={(e) => setMail(e.currentTarget.value)}\n                  value={mail}\n                  required\n                ></input>\n              </div>\n              <div className=\"Field\">\n                <label htmlFor=\"capacity\">Kapacitet</label>\n                <input\n                  type=\"number\"\n                  name=\"capacity\"\n                  id=\"Capacity\"\n                  ref={userRef}\n                  onChange={(e) => setCapacity(e.currentTarget.value)}\n                  value={capacity}\n                  required\n                ></input>\n              </div>\n              <div className=\"Field\">\n                <label htmlFor=\"phonenr\">Tlf. nr.</label>\n                <input\n                  type=\"tel\"\n                  name=\"phonenr\"\n                  id=\"Phonenr\"\n                  ref={userRef}\n                  onChange={(e) => setPhonenr(e.currentTarget.value)}\n                  value={phonenr}\n                  required\n                ></input>\n              </div>\n              <div className=\"Field\">\n                <label htmlFor=\"descr\">Beskrivelse</label>\n                <input\n                  type=\"textarea\"\n                  name=\"descr\"\n                  id=\"Description\"\n                  ref={userRef}\n                  onChange={(e) => setDescr(e.currentTarget.value)}\n                  value={descr}\n                  required\n                />\n              </div>\n              <div className=\"Field\">\n                <label htmlFor=\"image\">Billede</label>\n                <input\n                  type=\"file\"\n                  name=\"image\"\n                  className=\"File-input\"\n                  accept=\"image/*\"\n                  onChange={handleImageChange}\n                />\n                <img\n                  className=\"Image-preview\"\n                  src={image}\n                  alt=\"choose\"\n                  onError={(event) => (event.target.src = imgPlaceholder)}\n                />\n              </div>\n            </div>\n            <button className=\"btn\">Opret</button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default ResSignup;\n","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/components/RestaurantCard.js",["95","96"],[],"import React from \"react\";\nimport Popup from \"reactjs-popup\";\nimport { useRef, useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"../api/axios\";\n\nexport default function RestaurantCard({ restaurant }) {\n  //Gets the user id from localStorage\n  const userId = localStorage.getItem(\"userId\");\n  //The url to the php file that handles bookings\n  const BOOKING_URL = \"https://skole.mortengh.dk/PHP/booking.php\";\n  const navigate = useNavigate();\n  const errRef = useRef();\n  const [open, setOpen] = useState(false);\n  const closeModal = () => setOpen(false);\n\n  const [howMany, setHowMany] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n\n  const [errMsg, setErrMsg] = useState(\"\");\n\n  useEffect(() => {\n    setErrMsg(\"\");\n  }, [howMany, date, time]);\n\n  //When the form is submittet, it send a post request to the booking url with the values from the form\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    axios\n      .post(\n        BOOKING_URL,\n        JSON.stringify({\n          howMany,\n          date,\n          time,\n          restaurantID: restaurant.id,\n          usersID: userId,\n        })\n      )\n      .then((result) => {\n        if (result.data.status == \"invalid\") {\n          //If the request is invalid, it sets the error message to the error\n          setErrMsg(result.data.errorMessage);\n        } else {\n          //If the request is good, it empties the values\n          setHowMany(\"\");\n          setDate(\"\");\n          setTime(\"\");\n          navigate(\"/Bookings\");\n        }\n      });\n  };\n\n  return (\n    <article className=\"RestaurantCard\">\n      <img src={restaurant.img} alt={restaurant.title} />\n      <div className=\"TextContainer\">\n        <h2>{restaurant.resName}</h2>\n        <p>\n          Adresse: {restaurant.resAddress}, {restaurant.postnr}{\" \"}\n          {restaurant.city}\n        </p>\n        <p>Kapacitet: {restaurant.capacity}</p>\n        <button className=\"btn\" onClick={() => setOpen((o) => !o)}>\n          {\" \"}\n          Se Restaurant\n        </button>\n        <Popup\n          position=\"right center\"\n          open={open}\n          closeOnDocumentClick\n          onClose={closeModal}\n        >\n          <div className=\"BookingPopup\">\n            <div className=\"PopupHeader\">\n              <h2>{restaurant.resName}</h2>\n              <a className=\"close\" onClick={closeModal}>\n                &times;\n              </a>\n            </div>\n            <img src={restaurant.img} alt={restaurant.title} />\n            <div className=\"PopupContent\">\n              <div className=\"Row\">\n                <div className=\"Col-sm-6\">\n                  <h3>Book</h3>\n\n                  <div className=\"BookingForm\">\n                    <p\n                      ref={errRef}\n                      className={errMsg ? \"ErrorMessage\" : \"offScreen\"}\n                      aria-live=\"assertive\"\n                    >\n                      {errMsg}\n                    </p>\n                    <form onSubmit={handleSubmit}>\n                      <div className=\"Field\">\n                        <label htmlFor=\"howMany\">Hvor mange?</label>\n                        <input\n                          name=\"howMany\"\n                          type=\"number\"\n                          onChange={(e) => setHowMany(e.currentTarget.value)}\n                          value={howMany}\n                          required\n                        />\n                      </div>\n                      <div className=\"Field\">\n                        <label htmlFor=\"date\">Dato:</label>\n                        <input\n                          name=\"date\"\n                          type=\"date\"\n                          onChange={(e) => setDate(e.currentTarget.value)}\n                          value={date}\n                          required\n                        />\n                      </div>\n                      <div className=\"Field\">\n                        <label htmlFor=\"time\">Tid:</label>\n                        <input\n                          name=\"time\"\n                          type=\"time\"\n                          step=\"3600\"\n                          min=\"08:00\"\n                          max=\"21:00\"\n                          onChange={(e) => setTime(e.currentTarget.value)}\n                          value={time}\n                          required\n                        />\n                      </div>\n\n                      <button className=\"btn\">Book</button>\n                    </form>\n                  </div>\n                </div>\n                <div className=\"Col-sm-6\">\n                  <div className=\"Description\">\n                    <h3>Beskrivelse</h3>\n                    <p>{restaurant.descr}</p>\n                    <p>\n                      Adresse: {restaurant.resAddress}, {restaurant.postnr}{\" \"}\n                      {restaurant.city}\n                    </p>\n                    <p>Kapacitet: {restaurant.capacity}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </Popup>\n      </div>\n    </article>\n  );\n}\n","/Users/mortengedstedhansen/Documents/Skole/Eksamen 1/booking/src/components/BookingCard.js",["97","98","99","100","101"],[],"import React from \"react\";\nimport { useRef, useState, useEffect } from \"react\";\nimport { format } from \"date-fns\";\nimport axios from \"../api/axios\";\n\nexport default function BookingCard({ booking }) {\n  //Gets the user id from localStorage\n  const userId = localStorage.getItem(\"userId\");\n  //The url to the php file that deletes bookings\n  const DELETE_URL = \"https://skole.mortengh.dk/PHP/deleteBooking.php\";\n  const bookingId = booking.id;\n  const dateTime = booking.date + \"T\" + booking.time;\n  const bookingTime = new Date(dateTime);\n  const current = new Date();\n  const currentDate = `${current.getDate()}/${\n    current.getMonth() + 1\n  }/${current.getFullYear()}`;\n  let formattedDate = format(bookingTime, \"dd/M/yyyy\");\n  let formattedTime = format(bookingTime, \"H:mm\");\n\n  async function deleteBooking() {\n    /*When the cancel button is clicked it ask the user to confirm. If the user confirms \n    it send a post quest to the php file with the user id and the booking id */\n    const confirmDelete = window.confirm(\n      `Vil du annullere bookingen hos ${booking.resName} d. ${formattedDate} kl. ${formattedTime}?`\n    );\n    if (confirmDelete) {\n      axios\n        .post(\n          DELETE_URL,\n          JSON.stringify({\n            userId,\n            bookingId,\n          })\n        )\n        .then((result) => {\n          if (result.data.status == \"invalid\") {\n            //If the request is invalid, tells the error in an alert\n            alert(result.data.errorMessage);\n          } else {\n            //If the request is good, it tells the user that the booking is cancel and reload the page\n            window.location.reload();\n            alert(\"Bookingen Annulleret\");\n          }\n        });\n    }\n  }\n  async function deleteOldBooking() {\n    /* When the delete button is clicked, it ask the user to confirm and if it is confirmed, \n    it send a post request to the php file with the user id and the booking id */\n    const confirmDelete = window.confirm(\n      `Vil du slette bookingen hos ${booking.resName} d. ${formattedDate} kl. ${formattedTime}?`\n    );\n    if (confirmDelete) {\n      axios\n        .post(\n          DELETE_URL,\n          JSON.stringify({\n            userId,\n            bookingId,\n          })\n        )\n        .then((result) => {\n          if (result.data.status == \"invalid\") {\n            //If the request is invalid, it tells the user in an alert\n            alert(result.data.errorMessage);\n          } else {\n            //If the request is good, it tells the user in an alert and reloads the page\n            window.location.reload();\n            alert(\"Bookingen slettet\");\n          }\n        });\n    }\n  }\n\n  return (\n    <article className=\"BookingCard\">\n      <img src={booking.img} alt={booking.resName} />\n      <div className=\"TextContainer\">\n        <h2>{booking.resName}</h2>\n        <p>Dato: {formattedDate}</p>\n        <p>Kl.: {formattedTime}</p>\n        <p>Antal personer: {booking.numbOfPeople}</p>\n        {formattedDate >= currentDate ? (\n          <button className=\"btn btn-delete\" onClick={deleteBooking}>\n            Annuller booking\n          </button>\n        ) : (\n          <button className=\"btn btn-delete\" onClick={deleteOldBooking}>\n            Slet\n          </button>\n        )}\n      </div>\n    </article>\n  );\n}\n",{"ruleId":"102","severity":1,"message":"103","line":21,"column":6,"nodeType":"104","endLine":21,"endColumn":8,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":38,"column":32,"nodeType":"108","messageId":"109","endLine":38,"endColumn":34},{"ruleId":"102","severity":1,"message":"110","line":53,"column":8,"nodeType":"104","endLine":53,"endColumn":22,"suggestions":"111"},{"ruleId":"106","severity":1,"message":"112","line":79,"column":36,"nodeType":"108","messageId":"109","endLine":79,"endColumn":38},{"ruleId":"113","severity":1,"message":"114","line":99,"column":15,"nodeType":"115","endLine":99,"endColumn":60},{"ruleId":"116","severity":1,"message":"117","line":1,"column":10,"nodeType":"118","messageId":"119","endLine":1,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":28,"column":6,"nodeType":"104","endLine":28,"endColumn":8,"suggestions":"120"},{"ruleId":"106","severity":1,"message":"107","line":52,"column":32,"nodeType":"108","messageId":"109","endLine":52,"endColumn":34},{"ruleId":"106","severity":1,"message":"107","line":70,"column":32,"nodeType":"108","messageId":"109","endLine":70,"endColumn":34},{"ruleId":"106","severity":1,"message":"107","line":43,"column":32,"nodeType":"108","messageId":"109","endLine":43,"endColumn":34},{"ruleId":"121","severity":1,"message":"122","line":79,"column":15,"nodeType":"115","endLine":79,"endColumn":57},{"ruleId":"116","severity":1,"message":"123","line":2,"column":10,"nodeType":"118","messageId":"119","endLine":2,"endColumn":16},{"ruleId":"116","severity":1,"message":"124","line":2,"column":18,"nodeType":"118","messageId":"119","endLine":2,"endColumn":26},{"ruleId":"116","severity":1,"message":"125","line":2,"column":28,"nodeType":"118","messageId":"119","endLine":2,"endColumn":37},{"ruleId":"106","severity":1,"message":"107","line":37,"column":34,"nodeType":"108","messageId":"109","endLine":37,"endColumn":36},{"ruleId":"106","severity":1,"message":"107","line":64,"column":34,"nodeType":"108","messageId":"109","endLine":64,"endColumn":36},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.","ArrayExpression",["126"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'isSubmit' and 'signupValues'. Either include them or remove the dependency array.",["127"],"Expected '!==' and instead saw '!='.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donât need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar",["128"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'useRef' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.",{"desc":"129","fix":"130"},{"desc":"131","fix":"132"},{"desc":"129","fix":"133"},"Update the dependencies array to be: [userId]",{"range":"134","text":"135"},"Update the dependencies array to be: [isSubmit, signupErrors, signupValues]",{"range":"136","text":"137"},{"range":"138","text":"135"},[731,733],"[userId]",[1484,1498],"[isSubmit, signupErrors, signupValues]",[1109,1111]]